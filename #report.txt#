sudo code for functions 

/////////////////////////////////////////////
//
//  struct 
//    double coeff
//    int pow
//    struct link
//
////////////////////////////////////////////


/////////////////////////////////////////////
//mulPoly() sudo code
//function to multiply all the coefficents of a polynomial 
//
//-------------------------------------------
//declare varible for multipication = mul
//
//  while next node is not NULL
//	  node = node*mul
//    pow = node
//
//    next node 
//
/////////////////////////////////////////////

/////////////////////////////////////////////
//divPoly() sudo code
//function to divide all the coefficents of a polynomial 
//
//-------------------------------------------
//declare varible for division = div
//
//  while next node is not NULL
//	  node = node/div
//    pow = node
//
//    next node 
//
/////////////////////////////////////////////

//////////////////////////////////////////////
// normPoly() sudo code
// function to normalise the polynomial 
//
//---------------------------------------------
// while there is a next node
//    if next node is NULL
//      coeff=norm
//
//    node=next node
//
//   run divPoly with norm
//
//////////////////////////////////////////////

//////////////////////////////////////////////
// ReOrderPoly()
// function to return order to a polynomial
//
//-----------------------------------------------
//  declare the varible ord that is equale to the max order of the polynomial
//
//  for ord is greater that 0
//	print the coeffient and exponent of the ord'th exponent
//
//////////////////////////////////////////////


///////////////////////////////////////////////
// void createPoly(struct link *node)
// function to crate a poly
//
//--------------------------------------------- 
//
//  node->coeff = 3
//  node->exop = 0
//  node->next=(struct link *)malloc(sizeof(struct link));
//  node=node->next;
// 
//  repeat for other values 	
//
/////////////////////////////////////////////


/////////////////////////////////////////////
//
// void displayPoly(struct link *node)
// function to print a polynomial to sdout
//
//-------------------------------------------
//
// while next node is not NULL
//	print(node)
//	current node = next node
//	if next node is  NULL)
//		print "+"
////////////////////////////////////////////

////////////////////////////////////////////
//
// void addPoly(struct link *poly1,struct link *poly2,struct link  *poly)
// function to add two polynomials together
//
//------------------------------------------
//
//    while poly1->next and poly2->next
//         if poly1 powwe is greater poly2 power
//         {
//          polySub->pow = poly1->pow
//          polySub->coeff = poly1->coeff
//          poly1=poly1->next
//         }
//          else if poly1 power less than poly2 power
//         {
//          polySub->pow=poly2->pow
//          polySub->coeff=poly2->coeff
//          poly2=poly2->next
//         }
//          else
//         {
//          polySub->pow=poly1->pow
//          polySub->coeff=poly1->coeff-poly2->coeff
//          poly1=poly1->next
//          poly2=poly2->next
//         }
//          polySub->next=allocate size
//          polySub=polySub->next
//          polySub->next=NULL
//         }
//          while poly1->next or poly2->next
//         {
//          if poly1->next
//         {
//          polySub->pow=poly1->pow
//          polySub->coeff=poly1->coeff
//          poly1=poly1->next
//         }
//         if poly2->next
//         {
//          polySub->pow=poly2->pow
//          polySub->coeff=poly2->coeff
//          poly2=poly2->next
//         }
//          polySub->next=allocate size
//          polySub=polySub->next;
//          polySub->next=NULL
//         
//    }
//
/////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////
//  testpoly()
//  function to test funcions 
//
//  This function works the same for all testable functions
//
///////////////////////////////////////////////////////////////
//
//  print"polynomial pre finction"
//
//  function()
//  print"polynomial post function"
//
//  print"expected polynomial"
//
//  if (post polynomial == expected polynomial)
//  {
//    print"Test passed"
//  }
//  else
//  {
//    print"Test failed"
//  }
//
///////////////////////////////////////////////////////////////
